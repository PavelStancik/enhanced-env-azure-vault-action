"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setup = void 0;
const key_vault_1 = require("./key-vault");
[];
/**
 * Setup environment variables in key-vault.
 *
 * @param envKeys
 * @param underscoreReplacedBy
 * @param prefix
 * @returns {Promise<void>}
 */
function setup({ envKeys = [], underscoreReplacedBy = '0x', prefix = '' }) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log('set up env: starting...');
        const envFieldsArray = [];
        envKeys.forEach(element => {
            envFieldsArray.push({
                name: element.name,
                value: element.value,
                tags: element.tags
            });
        });
        for (const item of envFieldsArray) {
            const stripped = item.name.split('_').join(underscoreReplacedBy);
            const secretName = `${prefix}-${stripped}`;
            const value = item.value;
            const tags = item.tags;
            yield key_vault_1.client.setSecret(secretName, value, { tags });
            console.log(`${secretName} ===> saved`);
        }
        console.log('set up env: completed.');
    });
}
exports.setup = setup;
//# sourceMappingURL=setup.js.map