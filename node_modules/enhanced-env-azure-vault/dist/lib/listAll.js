"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.listAll = void 0;
const index_1 = require("./key-vault/index");
/**
 * Load all environment variables from key-vault.
 *
 * @param underscoreReplacedBy
 * @returns {Promise<void>}
 */
function listAll(prefix, tagType = '', underscoreReplacedBy = '0x') {
    return __awaiter(this, void 0, void 0, function* () {
        let arrSecrets = [];
        const envPrefix = `${prefix}-`;
        return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
            var e_1, _a;
            try {
                try {
                    for (var _b = __asyncValues(index_1.client.listPropertiesOfSecrets()), _c; _c = yield _b.next(), !_c.done;) {
                        let secretProperties = _c.value;
                        const azureSecret = yield index_1.client.getSecret(secretProperties.name);
                        secretProperties.name = ((secretProperties.name).split(underscoreReplacedBy).join('_')); //.replace(envPrefix, "")
                        if (tagType !== '' && secretProperties.tags && secretProperties.tags.type === tagType && secretProperties.name.startsWith(envPrefix)) {
                            secretProperties['name'] = (secretProperties.name).replace(envPrefix, "");
                            secretProperties['value'] = azureSecret.value;
                            secretProperties['environment'] = prefix;
                            arrSecrets.push(secretProperties);
                        }
                        else if (tagType === '' && prefix !== '' && secretProperties.name.startsWith(envPrefix)) {
                            secretProperties['name'] = (secretProperties.name).replace(envPrefix, "");
                            secretProperties['value'] = azureSecret.value;
                            secretProperties['environment'] = prefix;
                            arrSecrets.push(secretProperties);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                resolve(arrSecrets);
            }
            catch (err) {
                console.log('Error: ', err);
                reject('Error: ' + err);
            }
        }));
    });
}
exports.listAll = listAll;
//# sourceMappingURL=listAll.js.map