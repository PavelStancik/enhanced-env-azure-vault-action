"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const progress_1 = __importDefault(require("progress"));
const index_1 = require("./key-vault/index");
[];
/**
 * Load all environment variables from key-vault.
 *
 * @param envKeys
 * @param underscoreReplacedBy
 * @returns {Promise<void>}
 */
function init({ envKeys = [], underscoreReplacedBy = '0x', prefix }) {
    return __awaiter(this, void 0, void 0, function* () {
        const envPrefix = `${prefix}-`;
        const keys = Object.keys(envKeys).map(key => {
            return {
                name: key,
                secretName: envPrefix + key.split('_').join(underscoreReplacedBy)
            };
        });
        try {
            const bar = new progress_1.default('setting up environment [:bar] :current of :total', {
                total: Object.keys(envKeys).length
            });
            yield Promise.all(keys.map((key, index) => __awaiter(this, void 0, void 0, function* () {
                try {
                    const result = yield index_1.client.getSecret(key.secretName);
                    if (!process.env[key.name]) {
                        process.env[key.name] = result.value;
                    }
                    else {
                        console.debug(`process.env.${key.name} already exists. skipping...`);
                    }
                    bar.tick();
                }
                catch (error) {
                    if (error && error.statusCode === 404) {
                        throw new Error(`secret not found: ${key.name}.`);
                    }
                }
            })));
        }
        catch (error) {
            console.error(error);
            console.error('process.env setup failed');
            process.exit(1);
        }
    });
}
exports.init = init;
//# sourceMappingURL=init.js.map