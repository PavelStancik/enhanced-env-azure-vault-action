/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { KeyVaultClientContext } from "./keyVaultClientContext";
class KeyVaultClient extends KeyVaultClientContext {
    /**
     * Initializes a new instance of the KeyVaultClient class.
     * @param apiVersion Client API version.
     * @param [options] The parameter options
     */
    constructor(apiVersion, options) {
        super(apiVersion, options);
    }
    setSecret(vaultBaseUrl, secretName, value, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretName,
            value,
            options
        }, setSecretOperationSpec, callback);
    }
    deleteSecret(vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretName,
            options
        }, deleteSecretOperationSpec, callback);
    }
    updateSecret(vaultBaseUrl, secretName, secretVersion, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretName,
            secretVersion,
            options
        }, updateSecretOperationSpec, callback);
    }
    getSecret(vaultBaseUrl, secretName, secretVersion, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretName,
            secretVersion,
            options
        }, getSecretOperationSpec, callback);
    }
    getSecrets(vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            options
        }, getSecretsOperationSpec, callback);
    }
    getSecretVersions(vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretName,
            options
        }, getSecretVersionsOperationSpec, callback);
    }
    getDeletedSecrets(vaultBaseUrl, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            options
        }, getDeletedSecretsOperationSpec, callback);
    }
    getDeletedSecret(vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretName,
            options
        }, getDeletedSecretOperationSpec, callback);
    }
    purgeDeletedSecret(vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretName,
            options
        }, purgeDeletedSecretOperationSpec, callback);
    }
    recoverDeletedSecret(vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretName,
            options
        }, recoverDeletedSecretOperationSpec, callback);
    }
    backupSecret(vaultBaseUrl, secretName, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretName,
            options
        }, backupSecretOperationSpec, callback);
    }
    restoreSecret(vaultBaseUrl, secretBundleBackup, options, callback) {
        return this.sendOperationRequest({
            vaultBaseUrl,
            secretBundleBackup,
            options
        }, restoreSecretOperationSpec, callback);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const setSecretOperationSpec = {
    httpMethod: "PUT",
    path: "secrets/{secret-name}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.secretName0
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    requestBody: {
        parameterPath: {
            value: "value",
            tags: [
                "options",
                "tags"
            ],
            contentType: [
                "options",
                "contentType"
            ],
            secretAttributes: [
                "options",
                "secretAttributes"
            ]
        },
        mapper: Object.assign(Object.assign({}, Mappers.SecretSetParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const deleteSecretOperationSpec = {
    httpMethod: "DELETE",
    path: "secrets/{secret-name}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.secretName1
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSecretBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const updateSecretOperationSpec = {
    httpMethod: "PATCH",
    path: "secrets/{secret-name}/{secret-version}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.secretName1,
        Parameters.secretVersion
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    requestBody: {
        parameterPath: {
            contentType: [
                "options",
                "contentType"
            ],
            secretAttributes: [
                "options",
                "secretAttributes"
            ],
            tags: [
                "options",
                "tags"
            ]
        },
        mapper: Object.assign(Object.assign({}, Mappers.SecretUpdateParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const getSecretOperationSpec = {
    httpMethod: "GET",
    path: "secrets/{secret-name}/{secret-version}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.secretName1,
        Parameters.secretVersion
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const getSecretsOperationSpec = {
    httpMethod: "GET",
    path: "secrets",
    urlParameters: [
        Parameters.vaultBaseUrl
    ],
    queryParameters: [
        Parameters.maxresults,
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SecretListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const getSecretVersionsOperationSpec = {
    httpMethod: "GET",
    path: "secrets/{secret-name}/versions",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.secretName1
    ],
    queryParameters: [
        Parameters.maxresults,
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SecretListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const getDeletedSecretsOperationSpec = {
    httpMethod: "GET",
    path: "deletedsecrets",
    urlParameters: [
        Parameters.vaultBaseUrl
    ],
    queryParameters: [
        Parameters.maxresults,
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSecretListResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const getDeletedSecretOperationSpec = {
    httpMethod: "GET",
    path: "deletedsecrets/{secret-name}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.secretName1
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.DeletedSecretBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const purgeDeletedSecretOperationSpec = {
    httpMethod: "DELETE",
    path: "deletedsecrets/{secret-name}",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.secretName1
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const recoverDeletedSecretOperationSpec = {
    httpMethod: "POST",
    path: "deletedsecrets/{secret-name}/recover",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.secretName1
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const backupSecretOperationSpec = {
    httpMethod: "POST",
    path: "secrets/{secret-name}/backup",
    urlParameters: [
        Parameters.vaultBaseUrl,
        Parameters.secretName1
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    responses: {
        200: {
            bodyMapper: Mappers.BackupSecretResult
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
const restoreSecretOperationSpec = {
    httpMethod: "POST",
    path: "secrets/restore",
    urlParameters: [
        Parameters.vaultBaseUrl
    ],
    queryParameters: [
        Parameters.apiVersion
    ],
    requestBody: {
        parameterPath: {
            secretBundleBackup: "secretBundleBackup"
        },
        mapper: Object.assign(Object.assign({}, Mappers.SecretRestoreParameters), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SecretBundle
        },
        default: {
            bodyMapper: Mappers.KeyVaultError
        }
    },
    serializer
};
export { KeyVaultClient, KeyVaultClientContext, Models as KeyVaultModels, Mappers as KeyVaultMappers };
//# sourceMappingURL=keyVaultClient.js.map