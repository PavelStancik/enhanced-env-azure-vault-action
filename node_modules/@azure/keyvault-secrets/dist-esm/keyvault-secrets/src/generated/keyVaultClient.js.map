{"version":3,"file":"keyVaultClient.js","sourceRoot":"","sources":["../../../../src/generated/keyVaultClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { KeyVaultClientContext } from \"./keyVaultClientContext\";\n\nclass KeyVaultClient extends KeyVaultClientContext {\n  /**\n   * Initializes a new instance of the KeyVaultClient class.\n   * @param apiVersion Client API version.\n   * @param [options] The parameter options\n   */\n  constructor(apiVersion: string, options?: coreHttp.ServiceClientOptions) {\n    super(apiVersion, options);\n  }\n\n  /**\n   * The SET operation adds a secret to the Azure Key Vault. If the named secret already exists,\n   * Azure Key Vault creates a new version of that secret. This operation requires the secrets/set\n   * permission.\n   * @summary Sets a secret in a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SetSecretResponse>\n   */\n  setSecret(vaultBaseUrl: string, secretName: string, value: string, options?: Models.KeyVaultClientSetSecretOptionalParams): Promise<Models.SetSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param callback The callback\n   */\n  setSecret(vaultBaseUrl: string, secretName: string, value: string, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param value The value of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  setSecret(vaultBaseUrl: string, secretName: string, value: string, options: Models.KeyVaultClientSetSecretOptionalParams, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  setSecret(vaultBaseUrl: string, secretName: string, value: string, options?: Models.KeyVaultClientSetSecretOptionalParams | coreHttp.ServiceCallback<Models.SecretBundle>, callback?: coreHttp.ServiceCallback<Models.SecretBundle>): Promise<Models.SetSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        value,\n        options\n      },\n      setSecretOperationSpec,\n      callback) as Promise<Models.SetSecretResponse>;\n  }\n\n  /**\n   * The DELETE operation applies to any secret stored in Azure Key Vault. DELETE cannot be applied\n   * to an individual version of a secret. This operation requires the secrets/delete permission.\n   * @summary Deletes a secret from a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.DeleteSecretResponse>\n   */\n  deleteSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.DeleteSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  deleteSecret(vaultBaseUrl: string, secretName: string, callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  deleteSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>): void;\n  deleteSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedSecretBundle>, callback?: coreHttp.ServiceCallback<Models.DeletedSecretBundle>): Promise<Models.DeleteSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      deleteSecretOperationSpec,\n      callback) as Promise<Models.DeleteSecretResponse>;\n  }\n\n  /**\n   * The UPDATE operation changes specified attributes of an existing stored secret. Attributes that\n   * are not specified in the request are left unchanged. The value of a secret itself cannot be\n   * changed. This operation requires the secrets/set permission.\n   * @summary Updates the attributes associated with a specified secret in a given key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.UpdateSecretResponse>\n   */\n  updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: Models.KeyVaultClientUpdateSecretOptionalParams): Promise<Models.UpdateSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param callback The callback\n   */\n  updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options: Models.KeyVaultClientUpdateSecretOptionalParams, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  updateSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: Models.KeyVaultClientUpdateSecretOptionalParams | coreHttp.ServiceCallback<Models.SecretBundle>, callback?: coreHttp.ServiceCallback<Models.SecretBundle>): Promise<Models.UpdateSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        secretVersion,\n        options\n      },\n      updateSecretOperationSpec,\n      callback) as Promise<Models.UpdateSecretResponse>;\n  }\n\n  /**\n   * The GET operation is applicable to any secret stored in Azure Key Vault. This operation requires\n   * the secrets/get permission.\n   * @summary Get a specified secret from a given key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret. This URI fragment is optional. If not specified,\n   * the latest version of the secret is returned.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretResponse>\n   */\n  getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret. This URI fragment is optional. If not specified,\n   * the latest version of the secret is returned.\n   * @param callback The callback\n   */\n  getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param secretVersion The version of the secret. This URI fragment is optional. If not specified,\n   * the latest version of the secret is returned.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  getSecret(vaultBaseUrl: string, secretName: string, secretVersion: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>, callback?: coreHttp.ServiceCallback<Models.SecretBundle>): Promise<Models.GetSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        secretVersion,\n        options\n      },\n      getSecretOperationSpec,\n      callback) as Promise<Models.GetSecretResponse>;\n  }\n\n  /**\n   * The Get Secrets operation is applicable to the entire vault. However, only the base secret\n   * identifier and its attributes are provided in the response. Individual secret versions are not\n   * listed in the response. This operation requires the secrets/list permission.\n   * @summary List secrets in a specified key vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretsResponse>\n   */\n  getSecrets(vaultBaseUrl: string, options?: Models.KeyVaultClientGetSecretsOptionalParams): Promise<Models.GetSecretsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getSecrets(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.SecretListResult>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecrets(vaultBaseUrl: string, options: Models.KeyVaultClientGetSecretsOptionalParams, callback: coreHttp.ServiceCallback<Models.SecretListResult>): void;\n  getSecrets(vaultBaseUrl: string, options?: Models.KeyVaultClientGetSecretsOptionalParams | coreHttp.ServiceCallback<Models.SecretListResult>, callback?: coreHttp.ServiceCallback<Models.SecretListResult>): Promise<Models.GetSecretsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getSecretsOperationSpec,\n      callback) as Promise<Models.GetSecretsResponse>;\n  }\n\n  /**\n   * The full secret identifier and attributes are provided in the response. No values are returned\n   * for the secrets. This operations requires the secrets/list permission.\n   * @summary List all versions of the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetSecretVersionsResponse>\n   */\n  getSecretVersions(vaultBaseUrl: string, secretName: string, options?: Models.KeyVaultClientGetSecretVersionsOptionalParams): Promise<Models.GetSecretVersionsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  getSecretVersions(vaultBaseUrl: string, secretName: string, callback: coreHttp.ServiceCallback<Models.SecretListResult>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getSecretVersions(vaultBaseUrl: string, secretName: string, options: Models.KeyVaultClientGetSecretVersionsOptionalParams, callback: coreHttp.ServiceCallback<Models.SecretListResult>): void;\n  getSecretVersions(vaultBaseUrl: string, secretName: string, options?: Models.KeyVaultClientGetSecretVersionsOptionalParams | coreHttp.ServiceCallback<Models.SecretListResult>, callback?: coreHttp.ServiceCallback<Models.SecretListResult>): Promise<Models.GetSecretVersionsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      getSecretVersionsOperationSpec,\n      callback) as Promise<Models.GetSecretVersionsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secrets operation returns the secrets that have been deleted for a vault enabled\n   * for soft-delete. This operation requires the secrets/list permission.\n   * @summary Lists deleted secrets for the specified vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSecretsResponse>\n   */\n  getDeletedSecrets(vaultBaseUrl: string, options?: Models.KeyVaultClientGetDeletedSecretsOptionalParams): Promise<Models.GetDeletedSecretsResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param callback The callback\n   */\n  getDeletedSecrets(vaultBaseUrl: string, callback: coreHttp.ServiceCallback<Models.DeletedSecretListResult>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSecrets(vaultBaseUrl: string, options: Models.KeyVaultClientGetDeletedSecretsOptionalParams, callback: coreHttp.ServiceCallback<Models.DeletedSecretListResult>): void;\n  getDeletedSecrets(vaultBaseUrl: string, options?: Models.KeyVaultClientGetDeletedSecretsOptionalParams | coreHttp.ServiceCallback<Models.DeletedSecretListResult>, callback?: coreHttp.ServiceCallback<Models.DeletedSecretListResult>): Promise<Models.GetDeletedSecretsResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        options\n      },\n      getDeletedSecretsOperationSpec,\n      callback) as Promise<Models.GetDeletedSecretsResponse>;\n  }\n\n  /**\n   * The Get Deleted Secret operation returns the specified deleted secret along with its attributes.\n   * This operation requires the secrets/get permission.\n   * @summary Gets the specified deleted secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.GetDeletedSecretResponse>\n   */\n  getDeletedSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetDeletedSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  getDeletedSecret(vaultBaseUrl: string, secretName: string, callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  getDeletedSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.DeletedSecretBundle>): void;\n  getDeletedSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.DeletedSecretBundle>, callback?: coreHttp.ServiceCallback<Models.DeletedSecretBundle>): Promise<Models.GetDeletedSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      getDeletedSecretOperationSpec,\n      callback) as Promise<Models.GetDeletedSecretResponse>;\n  }\n\n  /**\n   * The purge deleted secret operation removes the secret permanently, without the possibility of\n   * recovery. This operation can only be enabled on a soft-delete enabled vault. This operation\n   * requires the secrets/purge permission.\n   * @summary Permanently deletes the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<coreHttp.RestResponse>\n   */\n  purgeDeletedSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  purgeDeletedSecret(vaultBaseUrl: string, secretName: string, callback: coreHttp.ServiceCallback<void>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  purgeDeletedSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;\n  purgeDeletedSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      purgeDeletedSecretOperationSpec,\n      callback);\n  }\n\n  /**\n   * Recovers the deleted secret in the specified vault. This operation can only be performed on a\n   * soft-delete enabled vault. This operation requires the secrets/recover permission.\n   * @summary Recovers the deleted secret to the latest version.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RecoverDeletedSecretResponse>\n   */\n  recoverDeletedSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.RecoverDeletedSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param callback The callback\n   */\n  recoverDeletedSecret(vaultBaseUrl: string, secretName: string, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the deleted secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  recoverDeletedSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  recoverDeletedSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>, callback?: coreHttp.ServiceCallback<Models.SecretBundle>): Promise<Models.RecoverDeletedSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      recoverDeletedSecretOperationSpec,\n      callback) as Promise<Models.RecoverDeletedSecretResponse>;\n  }\n\n  /**\n   * Requests that a backup of the specified secret be downloaded to the client. All versions of the\n   * secret will be downloaded. This operation requires the secrets/backup permission.\n   * @summary Backs up the specified secret.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.BackupSecretResponse>\n   */\n  backupSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BackupSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param callback The callback\n   */\n  backupSecret(vaultBaseUrl: string, secretName: string, callback: coreHttp.ServiceCallback<Models.BackupSecretResult>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretName The name of the secret.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  backupSecret(vaultBaseUrl: string, secretName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BackupSecretResult>): void;\n  backupSecret(vaultBaseUrl: string, secretName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BackupSecretResult>, callback?: coreHttp.ServiceCallback<Models.BackupSecretResult>): Promise<Models.BackupSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretName,\n        options\n      },\n      backupSecretOperationSpec,\n      callback) as Promise<Models.BackupSecretResponse>;\n  }\n\n  /**\n   * Restores a backed up secret, and all its versions, to a vault. This operation requires the\n   * secrets/restore permission.\n   * @summary Restores a backed up secret to a vault.\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.RestoreSecretResponse>\n   */\n  restoreSecret(vaultBaseUrl: string, secretBundleBackup: Uint8Array, options?: coreHttp.RequestOptionsBase): Promise<Models.RestoreSecretResponse>;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param callback The callback\n   */\n  restoreSecret(vaultBaseUrl: string, secretBundleBackup: Uint8Array, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  /**\n   * @param vaultBaseUrl The vault name, for example https://myvault.vault.azure.net.\n   * @param secretBundleBackup The backup blob associated with a secret bundle.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  restoreSecret(vaultBaseUrl: string, secretBundleBackup: Uint8Array, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.SecretBundle>): void;\n  restoreSecret(vaultBaseUrl: string, secretBundleBackup: Uint8Array, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.SecretBundle>, callback?: coreHttp.ServiceCallback<Models.SecretBundle>): Promise<Models.RestoreSecretResponse> {\n    return this.sendOperationRequest(\n      {\n        vaultBaseUrl,\n        secretBundleBackup,\n        options\n      },\n      restoreSecretOperationSpec,\n      callback) as Promise<Models.RestoreSecretResponse>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers);\nconst setSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PUT\",\n  path: \"secrets/{secret-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName0\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      value: \"value\",\n      tags: [\n        \"options\",\n        \"tags\"\n      ],\n      contentType: [\n        \"options\",\n        \"contentType\"\n      ],\n      secretAttributes: [\n        \"options\",\n        \"secretAttributes\"\n      ]\n    },\n    mapper: {\n      ...Mappers.SecretSetParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst deleteSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"secrets/{secret-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst updateSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"PATCH\",\n  path: \"secrets/{secret-name}/{secret-version}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1,\n    Parameters.secretVersion\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      contentType: [\n        \"options\",\n        \"contentType\"\n      ],\n      secretAttributes: [\n        \"options\",\n        \"secretAttributes\"\n      ],\n      tags: [\n        \"options\",\n        \"tags\"\n      ]\n    },\n    mapper: {\n      ...Mappers.SecretUpdateParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets/{secret-name}/{secret-version}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1,\n    Parameters.secretVersion\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets\",\n  urlParameters: [\n    Parameters.vaultBaseUrl\n  ],\n  queryParameters: [\n    Parameters.maxresults,\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getSecretVersionsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"secrets/{secret-name}/versions\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1\n  ],\n  queryParameters: [\n    Parameters.maxresults,\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSecretsOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedsecrets\",\n  urlParameters: [\n    Parameters.vaultBaseUrl\n  ],\n  queryParameters: [\n    Parameters.maxresults,\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretListResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst getDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"GET\",\n  path: \"deletedsecrets/{secret-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.DeletedSecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst purgeDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"DELETE\",\n  path: \"deletedsecrets/{secret-name}\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst recoverDeletedSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"deletedsecrets/{secret-name}/recover\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst backupSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"secrets/{secret-name}/backup\",\n  urlParameters: [\n    Parameters.vaultBaseUrl,\n    Parameters.secretName1\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  responses: {\n    200: {\n      bodyMapper: Mappers.BackupSecretResult\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nconst restoreSecretOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"secrets/restore\",\n  urlParameters: [\n    Parameters.vaultBaseUrl\n  ],\n  queryParameters: [\n    Parameters.apiVersion\n  ],\n  requestBody: {\n    parameterPath: {\n      secretBundleBackup: \"secretBundleBackup\"\n    },\n    mapper: {\n      ...Mappers.SecretRestoreParameters,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SecretBundle\n    },\n    default: {\n      bodyMapper: Mappers.KeyVaultError\n    }\n  },\n  serializer\n};\n\nexport {\n  KeyVaultClient,\n  KeyVaultClientContext,\n  Models as KeyVaultModels,\n  Mappers as KeyVaultMappers\n};\n"]}