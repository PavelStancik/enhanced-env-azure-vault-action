{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/generated/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as coreHttp from \"@azure/core-http\";\n\n/**\n * The object attributes managed by the KeyVault service.\n */\nexport interface Attributes {\n  /**\n   * Determines whether the object is enabled.\n   */\n  enabled?: boolean;\n  /**\n   * Not before date in UTC.\n   */\n  notBefore?: Date;\n  /**\n   * Expiry date in UTC.\n   */\n  expires?: Date;\n  /**\n   * Creation time in UTC.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly created?: Date;\n  /**\n   * Last updated time in UTC.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly updated?: Date;\n}\n\n/**\n * The secret management attributes.\n */\nexport interface SecretAttributes extends Attributes {\n  /**\n   * softDelete data retention days. Value should be >=7 and <=90 when softDelete enabled,\n   * otherwise 0.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly recoverableDays?: number;\n  /**\n   * Reflects the deletion recovery level currently in effect for secrets in the current vault. If\n   * it contains 'Purgeable', the secret can be permanently deleted by a privileged user;\n   * otherwise, only the system can purge the secret, at the end of the retention interval.\n   * Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',\n   * 'Recoverable+ProtectedSubscription', 'CustomizedRecoverable+Purgeable',\n   * 'CustomizedRecoverable', 'CustomizedRecoverable+ProtectedSubscription'\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly recoveryLevel?: DeletionRecoveryLevel;\n}\n\n/**\n * A secret consisting of a value, id and its attributes.\n */\nexport interface SecretBundle {\n  /**\n   * The secret value.\n   */\n  value?: string;\n  /**\n   * The secret id.\n   */\n  id?: string;\n  /**\n   * The content type of the secret.\n   */\n  contentType?: string;\n  /**\n   * The secret management attributes.\n   */\n  attributes?: SecretAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * If this is a secret backing a KV certificate, then this field specifies the corresponding key\n   * backing the KV certificate.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly kid?: string;\n  /**\n   * True if the secret's lifetime is managed by key vault. If this is a secret backing a\n   * certificate, then managed will be true.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly managed?: boolean;\n}\n\n/**\n * The secret item containing secret metadata.\n */\nexport interface SecretItem {\n  /**\n   * Secret identifier.\n   */\n  id?: string;\n  /**\n   * The secret management attributes.\n   */\n  attributes?: SecretAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * Type of the secret value such as a password.\n   */\n  contentType?: string;\n  /**\n   * True if the secret's lifetime is managed by key vault. If this is a key backing a certificate,\n   * then managed will be true.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly managed?: boolean;\n}\n\n/**\n * A Deleted Secret consisting of its previous id, attributes and its tags, as well as information\n * on when it will be purged.\n */\nexport interface DeletedSecretBundle extends SecretBundle {\n  /**\n   * The url of the recovery object, used to identify and recover the deleted secret.\n   */\n  recoveryId?: string;\n  /**\n   * The time when the secret is scheduled to be purged, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly scheduledPurgeDate?: Date;\n  /**\n   * The time when the secret was deleted, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly deletedDate?: Date;\n}\n\n/**\n * The deleted secret item containing metadata about the deleted secret.\n */\nexport interface DeletedSecretItem extends SecretItem {\n  /**\n   * The url of the recovery object, used to identify and recover the deleted secret.\n   */\n  recoveryId?: string;\n  /**\n   * The time when the secret is scheduled to be purged, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly scheduledPurgeDate?: Date;\n  /**\n   * The time when the secret was deleted, in UTC\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly deletedDate?: Date;\n}\n\n/**\n * The secret restore parameters.\n */\nexport interface SecretRestoreParameters {\n  /**\n   * The backup blob associated with a secret bundle.\n   */\n  secretBundleBackup: Uint8Array;\n}\n\n/**\n * Properties of the key backing a certificate.\n */\nexport interface SecretProperties {\n  /**\n   * The media type (MIME type).\n   */\n  contentType?: string;\n}\n\n/**\n * The secret set parameters.\n */\nexport interface SecretSetParameters {\n  /**\n   * The value of the secret.\n   */\n  value: string;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * Type of the secret value such as a password.\n   */\n  contentType?: string;\n  /**\n   * The secret management attributes.\n   */\n  secretAttributes?: SecretAttributes;\n}\n\n/**\n * The secret update parameters.\n */\nexport interface SecretUpdateParameters {\n  /**\n   * Type of the secret value such as a password.\n   */\n  contentType?: string;\n  /**\n   * The secret management attributes.\n   */\n  secretAttributes?: SecretAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n}\n\n/**\n * The secret list result.\n */\nexport interface SecretListResult {\n  /**\n   * A response message containing a list of secrets in the key vault along with a link to the next\n   * page of secrets.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly value?: SecretItem[];\n  /**\n   * The URL to get the next set of secrets.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * The deleted secret list result\n */\nexport interface DeletedSecretListResult {\n  /**\n   * A response message containing a list of the deleted secrets in the vault along with a link to\n   * the next page of deleted secrets\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly value?: DeletedSecretItem[];\n  /**\n   * The URL to get the next set of deleted secrets.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly nextLink?: string;\n}\n\n/**\n * The backup secret result, containing the backup blob.\n */\nexport interface BackupSecretResult {\n  /**\n   * The backup blob containing the backed up secret.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly value?: Uint8Array;\n}\n\n/**\n * The key vault server error.\n */\nexport interface ErrorModel {\n  /**\n   * The error code.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly code?: string;\n  /**\n   * The error message.\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly message?: string;\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly innerError?: ErrorModel;\n}\n\n/**\n * The key vault error exception.\n */\nexport interface KeyVaultError {\n  /**\n   * **NOTE: This property will not be serialized. It can only be populated by the server.**\n   */\n  readonly error?: ErrorModel;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientSetSecretOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n  /**\n   * Type of the secret value such as a password.\n   */\n  contentType?: string;\n  /**\n   * The secret management attributes.\n   */\n  secretAttributes?: SecretAttributes;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientUpdateSecretOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Type of the secret value such as a password.\n   */\n  contentType?: string;\n  /**\n   * The secret management attributes.\n   */\n  secretAttributes?: SecretAttributes;\n  /**\n   * Application specific metadata in the form of key-value pairs.\n   */\n  tags?: { [propertyName: string]: string };\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientGetSecretsOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Maximum number of results to return in a page. If not specified, the service will return up to\n   * 25 results.\n   */\n  maxresults?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientGetSecretVersionsOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Maximum number of results to return in a page. If not specified, the service will return up to\n   * 25 results.\n   */\n  maxresults?: number;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface KeyVaultClientGetDeletedSecretsOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * Maximum number of results to return in a page. If not specified the service will return up to\n   * 25 results.\n   */\n  maxresults?: number;\n}\n\n/**\n * Defines values for DeletionRecoveryLevel.\n * Possible values include: 'Purgeable', 'Recoverable+Purgeable', 'Recoverable',\n * 'Recoverable+ProtectedSubscription', 'CustomizedRecoverable+Purgeable', 'CustomizedRecoverable',\n * 'CustomizedRecoverable+ProtectedSubscription'\n * @readonly\n * @enum {string}\n */\nexport type DeletionRecoveryLevel = 'Purgeable' | 'Recoverable+Purgeable' | 'Recoverable' | 'Recoverable+ProtectedSubscription' | 'CustomizedRecoverable+Purgeable' | 'CustomizedRecoverable' | 'CustomizedRecoverable+ProtectedSubscription';\n\n/**\n * Contains response data for the setSecret operation.\n */\nexport type SetSecretResponse = SecretBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SecretBundle;\n    };\n};\n\n/**\n * Contains response data for the deleteSecret operation.\n */\nexport type DeleteSecretResponse = DeletedSecretBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DeletedSecretBundle;\n    };\n};\n\n/**\n * Contains response data for the updateSecret operation.\n */\nexport type UpdateSecretResponse = SecretBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SecretBundle;\n    };\n};\n\n/**\n * Contains response data for the getSecret operation.\n */\nexport type GetSecretResponse = SecretBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SecretBundle;\n    };\n};\n\n/**\n * Contains response data for the getSecrets operation.\n */\nexport type GetSecretsResponse = SecretListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SecretListResult;\n    };\n};\n\n/**\n * Contains response data for the getSecretVersions operation.\n */\nexport type GetSecretVersionsResponse = SecretListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SecretListResult;\n    };\n};\n\n/**\n * Contains response data for the getDeletedSecrets operation.\n */\nexport type GetDeletedSecretsResponse = DeletedSecretListResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DeletedSecretListResult;\n    };\n};\n\n/**\n * Contains response data for the getDeletedSecret operation.\n */\nexport type GetDeletedSecretResponse = DeletedSecretBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: DeletedSecretBundle;\n    };\n};\n\n/**\n * Contains response data for the recoverDeletedSecret operation.\n */\nexport type RecoverDeletedSecretResponse = SecretBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SecretBundle;\n    };\n};\n\n/**\n * Contains response data for the backupSecret operation.\n */\nexport type BackupSecretResponse = BackupSecretResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: BackupSecretResult;\n    };\n};\n\n/**\n * Contains response data for the restoreSecret operation.\n */\nexport type RestoreSecretResponse = SecretBundle & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SecretBundle;\n    };\n};\n"]}