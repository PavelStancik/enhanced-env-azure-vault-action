// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
import { delay } from "@azure/core-http";
import { Poller } from "@azure/core-lro";
import { makeDeleteSecretPollOperation } from "./operation";
/**
 * Class that deletes a poller that waits until a secret finishes being deleted
 */
export class DeleteSecretPoller extends Poller {
    constructor(options) {
        const { client, name, requestOptions, intervalInMs = 2000, resumeFrom } = options;
        let state;
        if (resumeFrom) {
            state = JSON.parse(resumeFrom).state;
        }
        const operation = makeDeleteSecretPollOperation(Object.assign(Object.assign({}, state), { name,
            requestOptions,
            client }));
        super(operation);
        this.intervalInMs = intervalInMs;
    }
    /**
     * The method used by the poller to wait before attempting to update its operation.
     * @memberof DeleteSecretPoller
     */
    delay() {
        return __awaiter(this, void 0, void 0, function* () {
            return delay(this.intervalInMs);
        });
    }
}
//# sourceMappingURL=poller.js.map