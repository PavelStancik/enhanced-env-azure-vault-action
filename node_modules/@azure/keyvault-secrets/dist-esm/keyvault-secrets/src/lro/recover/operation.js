// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
/**
 * @summary Reaches to the service and updates the delete secret's poll operation.
 * @param [options] The optional parameters, which are an abortSignal from @azure/abort-controller and a function that triggers the poller's onProgress function.
 */
function update(options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const state = this.state;
        const { name, client } = state;
        const requestOptions = state.requestOptions || {};
        if (options.abortSignal) {
            requestOptions.abortSignal = options.abortSignal;
        }
        if (!state.isStarted) {
            try {
                state.result = (yield client.getSecret(name, { requestOptions })).properties;
                state.isCompleted = true;
            }
            catch (_a) {
                // Nothing to do here.
            }
            if (!state.isCompleted) {
                state.result = yield client.recoverDeletedSecret(name, { requestOptions });
                state.isStarted = true;
            }
        }
        if (!state.isCompleted) {
            try {
                state.result = (yield client.getSecret(name, { requestOptions })).properties;
                state.isCompleted = true;
            }
            catch (error) {
                if (error.statusCode === 403) {
                    // At this point, the resource exists but the user doesn't have access to it.
                    state.isCompleted = true;
                }
                else if (error.statusCode !== 404) {
                    state.error = error;
                    state.isCompleted = true;
                }
            }
        }
        return makeRecoverDeletedSecretPollOperation(state);
    });
}
/**
 * @summary Reaches to the service and cancels the secret's operation, also updating the secret's poll operation
 * @param [options] The optional parameters, which is only an abortSignal from @azure/abort-controller
 */
function cancel() {
    return __awaiter(this, void 0, void 0, function* () {
        throw new Error("Canceling the deletion of a secret is not supported.");
    });
}
/**
 * @summary Serializes the create secret's poll operation
 */
function toString() {
    return JSON.stringify({
        state: this.state
    });
}
/**
 * @summary Builds a create secret's poll operation
 * @param [state] A poll operation's state, in case the new one is intended to follow up where the previous one was left.
 */
export function makeRecoverDeletedSecretPollOperation(state) {
    return {
        state: Object.assign({}, state),
        update,
        cancel,
        toString
    };
}
//# sourceMappingURL=operation.js.map